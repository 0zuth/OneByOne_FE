name: Sync to Forked Repository for Production Deployment

on:
  push:
    branches: [main] # 조직 레포 main 브랜치 업데이트 시 포크 레포와 동기화하여 프로덕션 배포

jobs:
  sync-to-fork-for-production:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout organization repository main branch
        uses: actions/checkout@v4

      - name: Setup Node.js environment for React build
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install npm dependencies
        run: npm ci

      - name: Build React application for production
        run: npm run build

      - name: Clone target repository
        run: |
          git clone https://x-access-token:${{ secrets.ZERO_GITHUB_KEY }}@github.com/0zuth/OneByOne_FE.git target-repo
          cd target-repo
          git config user.name "0zuth"
          git config user.email "${{ secrets.ZERO_ACCOUNT_EMAIL }}"

      - name: Push built files to forked repository (0zuth/OneByOne_FE)
        run: |
          # 빌드된 파일들만 복사 (기존 소스코드는 유지)
          cp -r dist/* target-repo/
          cd target-repo
          # .github 디렉토리 제거 (CI/CD 설정은 타겟 저장소에서 불필요)
          rm -rf .github
          # .storybook 디렉토리 제거 (개발용)
          rm -rf .storybook
          # src/assets 원본 파일 제거 (빌드된 assets이 dist/에 포함됨)
          rm -rf src/assets
          git add -A
          git status
          git commit -m "${{ github.event.commits[0].message }}" || echo "No changes to commit"
          git push https://x-access-token:${{ secrets.ZERO_GITHUB_KEY }}@github.com/0zuth/OneByOne_FE.git main
        env:
          GIT_AUTHOR_NAME: "0zuth"
          GIT_AUTHOR_EMAIL: "${{ secrets.ZERO_ACCOUNT_EMAIL }}"
          GIT_COMMITTER_NAME: "0zuth"
          GIT_COMMITTER_EMAIL: "${{ secrets.ZERO_ACCOUNT_EMAIL }}"
        continue-on-error: true

      - name: Confirm successful sync to forked repository for Vercel deployment
        run: echo "✅ Successfully synced to forked repository (0zuth/OneByOne_FE)"
